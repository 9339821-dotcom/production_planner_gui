import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import os

class SimpleProductionPlanner:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.load_data()
    
    def load_data(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.orders_df = pd.read_excel(self.excel_file, sheet_name='–ó–∞–∫–∞–∑—ã')
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False

class ProductionPlannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Production Planner")
        self.root.geometry("800x600")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        if not os.path.exists("–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–∫–∞–∑–æ–≤.xlsx"):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª '–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–∫–∞–∑–æ–≤.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.planner = SimpleProductionPlanner("–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–∫–∞–∑–æ–≤.xlsx")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_ui()
        
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üè≠ Production Planner", 
                               font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        info_label = ttk.Label(main_frame, 
                              text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(self.planner.orders_df)}",
                              font=("Arial", 10))
        info_label.pack(pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        table_frame = ttk.Frame(main_frame)
        table_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview
        columns = ("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ö–ª–∏–µ–Ω—Ç", "–ü–ª–æ—â–∞–¥—å", "–°—Ç–æ–∏–º–æ—Å—Ç—å")
        self.tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        for _, row in self.planner.orders_df.iterrows():
            self.tree.insert("", "end", values=(
                row.get("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", ""),
                row.get("–ö–ª–∏–µ–Ω—Ç", ""),
                row.get("–ü–ª–æ—â–∞–¥—å –∑–∞–∫–∞–∑–∞", 0),
                row.get("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞", 0)
            ))
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        self.tree.pack(side="left", fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=10)
        
        ttk.Button(button_frame, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", 
                  command=self.calculate_materials).pack(side="left", padx=5)
        ttk.Button(button_frame, text="–í—ã—Ö–æ–¥", 
                  command=self.root.quit).pack(side="right", padx=5)
    
    def calculate_materials(self):
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return
        
        order_count = len(selected)
        messagebox.showinfo("–†–∞—Å—á–µ—Ç", f"–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞—Å—á–µ—Ç –¥–ª—è {order_count} –∑–∞–∫–∞–∑–æ–≤")

def main():
    root = tk.Tk()
    app = ProductionPlannerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
