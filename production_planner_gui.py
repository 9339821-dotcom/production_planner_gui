import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
import sys
import json
from collections import defaultdict
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from tkcalendar import DateEntry
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import seaborn as sns

class ModernProductionPlanner:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.orders_df = None
        self.materials_df = None
        self.stock_data = {}
        self.reserved_materials = defaultdict(float)
        self.selected_orders = {}
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏
            self.orders_df = pd.read_excel(self.excel_file, sheet_name='–ó–∞–∫–∞–∑—ã')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
            self.materials_df = pd.read_excel(self.excel_file, sheet_name='–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤')
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
            if '–ù–∞ —Å–∫–ª–∞–¥–µ' in self.materials_df.columns:
                for _, row in self.materials_df.iterrows():
                    material = row['–ú–∞—Ç–µ—Ä–∏–∞–ª']
                    if pd.notna(material):
                        stock = row['–ù–∞ —Å–∫–ª–∞–¥–µ'] if pd.notna(row['–ù–∞ —Å–∫–ª–∞–¥–µ']) else 0
                        self.stock_data[str(material).strip()] = float(stock)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.orders_df)} –∑–∞–∫–∞–∑–æ–≤, {len(self.materials_df)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def get_companies(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
        return sorted([str(x) for x in self.orders_df['–ö–ª–∏–µ–Ω—Ç'].unique() if pd.notna(x)])
    
    def calculate_material_requirements(self, selected_order_numbers):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        if not selected_order_numbers:
            return {"error": "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–∞–∫–∞–∑—ã"}
        
        required_materials = defaultdict(float)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        all_materials = []
        if '–ú–∞—Ç–µ—Ä–∏–∞–ª' in self.materials_df.columns:
            all_materials = [str(x).strip() for x in self.materials_df['–ú–∞—Ç–µ—Ä–∏–∞–ª'] if pd.notna(x)]
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for order_num in selected_order_numbers:
            order_num_clean = str(order_num).strip()
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            order_columns = []
            for col in self.materials_df.columns:
                col_str = str(col).strip()
                if order_num_clean == col_str or order_num_clean in col_str.split():
                    order_columns.append(col)
            
            if order_columns:
                for material_idx, material_name in enumerate(all_materials):
                    total_requirement = 0
                    
                    for order_col in order_columns:
                        if order_col in self.materials_df.columns:
                            value = self.materials_df[order_col].iloc[material_idx]
                            if pd.notna(value) and value != 0:
                                try:
                                    total_requirement += float(value)
                                except (ValueError, TypeError):
                                    pass
                    
                    if total_requirement > 0:
                        required_materials[material_name] += total_requirement
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        material_balance = {}
        purchase_requirements = {}
        
        for material, required in required_materials.items():
            current_stock = self.stock_data.get(material, 0)
            reserved = self.reserved_materials.get(material, 0)
            available_stock = max(0, current_stock - reserved)
            
            balance_after = available_stock - required
            material_balance[material] = {
                '–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å': current_stock,
                '–£–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ': reserved,
                '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å': available_stock,
                '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö': required,
                '–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ': balance_after
            }
            
            # –ï—Å–ª–∏ –±—É–¥–µ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É
            if balance_after < 0:
                purchase_requirements[material] = abs(balance_after)
        
        return {
            'material_requirements': dict(required_materials),
            'material_balance': material_balance,
            'purchase_requirements': purchase_requirements
        }

class ModernProductionPlannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üè≠ Production Planner - –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.planner = None
        self.load_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"""
        style = ttk.Style()
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–º–∞
        style.theme_use('clam')
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
        style.configure('Modern.TFrame', background='#f8f9fa')
        style.configure('Header.TLabel', background='#343a40', foreground='white', font=('Arial', 12, 'bold'))
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), background='#f8f9fa')
        style.configure('Card.TFrame', background='white', relief='raised', borderwidth=1)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Primary.TButton', background='#007bff', foreground='white', font=('Arial', 10))
        style.map('Primary.TButton', background=[('active', '#0056b3')])
        
        style.configure('Success.TButton', background='#28a745', foreground='white', font=('Arial', 10))
        style.map('Success.TButton', background=[('active', '#1e7e34')])
        
        style.configure('Danger.TButton', background='#dc3545', foreground='white', font=('Arial', 10))
        style.map('Danger.TButton', background=[('active', '#c82333')])
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        excel_file = "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–∫–∞–∑–æ–≤.xlsx"
        if not os.path.exists(excel_file):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
            self.root.destroy()
            return
        
        try:
            self.planner = ModernProductionPlanner(excel_file)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n–ó–∞–∫–∞–∑–æ–≤: {len(self.planner.orders_df)}\n–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(self.planner.materials_df)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
            self.root.destroy()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Modern.TFrame')
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_container, style='Modern.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        title_label = ttk.Label(header_frame, text="üè≠ PRODUCTION PLANNER", style='Title.TLabel')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(main_container)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û–±–∑–æ—Ä –∑–∞–∫–∞–∑–æ–≤
        self.setup_orders_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        self.setup_planning_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.setup_materials_tab(notebook)
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –î–∞—à–±–æ—Ä–¥
        self.setup_dashboard_tab(notebook)
    
    def setup_orders_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —Å –æ–±–∑–æ—Ä–æ–º –∑–∞–∫–∞–∑–æ–≤"""
        orders_frame = ttk.Frame(notebook, style='Modern.TFrame')
        notebook.add(orders_frame, text="üìã –ó–∞–∫–∞–∑—ã")
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_frame = ttk.Frame(orders_frame, style='Card.TFrame')
        filter_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(filter_frame, text="–§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏:", font=('Arial', 10)).grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
        
        self.company_var = tk.StringVar()
        companies = ['–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏'] + self.planner.get_companies()
        company_combo = ttk.Combobox(filter_frame, textvariable=self.company_var, values=companies, state='readonly')
        company_combo.set('–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏')
        company_combo.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)
        company_combo.bind('<<ComboboxSelected>>', self.filter_orders)
        
        # –ü–æ–∏—Å–∫
        ttk.Label(filter_frame, text="–ü–æ–∏—Å–∫:", font=('Arial', 10)).grid(row=0, column=2, padx=5, pady=5, sticky=tk.W)
        self.search_var = tk.StringVar()
        search_entry = ttk.Entry(filter_frame, textvariable=self.search_var, width=20)
        search_entry.grid(row=0, column=3, padx=5, pady=5, sticky=tk.W)
        search_entry.bind('<KeyRelease>', self.filter_orders)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        table_frame = ttk.Frame(orders_frame, style='Modern.TFrame')
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        columns = ('–ù–æ–º–µ—Ä', '–ö–ª–∏–µ–Ω—Ç', '–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏', '–ü–ª–æ—â–∞–¥—å', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–°–æ—Å—Ç–æ—è–Ω–∏–µ', '–í—ã–±–æ—Ä')
        self.orders_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.orders_tree.heading(col, text=col)
            self.orders_tree.column(col, width=120)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.orders_tree.yview)
        self.orders_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.orders_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_orders_data()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = ttk.Frame(orders_frame, style='Modern.TFrame')
        button_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(button_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                  command=self.add_selected_orders, style='Primary.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.load_orders_data, style='Success.TButton').pack(side=tk.LEFT, padx=5)
    
    def setup_planning_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        planning_frame = ttk.Frame(notebook, style='Modern.TFrame')
        notebook.add(planning_frame, text="üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        left_frame = ttk.Frame(planning_frame, style='Modern.TFrame')
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        ttk.Label(left_frame, text="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=5)
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        self.selected_orders_listbox = tk.Listbox(left_frame, height=15, font=('Arial', 10))
        self.selected_orders_listbox.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        order_buttons_frame = ttk.Frame(left_frame, style='Modern.TFrame')
        order_buttons_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(order_buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", 
                  command=self.remove_selected_order, style='Danger.TButton').pack(side=tk.LEFT, padx=2)
        
        ttk.Button(order_buttons_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", 
                  command=self.clear_all_orders, style='Danger.TButton').pack(side=tk.LEFT, padx=2)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        right_frame = ttk.Frame(planning_frame, style='Modern.TFrame')
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
        ttk.Label(right_frame, text="–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=5)
        
        date_frame = ttk.Frame(right_frame, style='Modern.TFrame')
        date_frame.pack(fill=tk.X, pady=5)
        
        self.shipment_date = DateEntry(date_frame, width=12, background='darkblue',
                                      foreground='white', borderwidth=2, date_pattern='dd.mm.yyyy',
                                      font=('Arial', 10))
        self.shipment_date.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        planning_buttons_frame = ttk.Frame(right_frame, style='Modern.TFrame')
        planning_buttons_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(planning_buttons_frame, text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏", 
                  command=self.calculate_requirements, style='Primary.TButton').pack(fill=tk.X, pady=2)
        
        ttk.Button(planning_buttons_frame, text="üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", 
                  command=self.reserve_materials, style='Success.TButton').pack(fill=tk.X, pady=2)
        
        ttk.Button(planning_buttons_frame, text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É", 
                  command=self.generate_purchase_order, style='Primary.TButton').pack(fill=tk.X, pady=2)
        
        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ttk.Label(right_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:", font=('Arial', 12, 'bold')).pack(anchor=tk.W, pady=(20, 5))
        
        self.results_text = scrolledtext.ScrolledText(right_frame, height=10, font=('Arial', 9))
        self.results_text.pack(fill=tk.BOTH, expand=True, pady=5)
    
    def setup_materials_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        materials_frame = ttk.Frame(notebook, style='Modern.TFrame')
        notebook.add(materials_frame, text="üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        table_frame = ttk.Frame(materials_frame, style='Modern.TFrame')
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        columns = ('–ú–∞—Ç–µ—Ä–∏–∞–ª', '–ù–∞ —Å–∫–ª–∞–¥–µ', '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ', '–î–æ—Å—Ç—É–ø–Ω–æ', '–°—Ç–∞—Ç—É—Å')
        self.materials_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=20)
        
        for col in columns:
            self.materials_tree.heading(col, text=col)
            self.materials_tree.column(col, width=150)
        
        scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.materials_tree.yview)
        self.materials_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.materials_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        self.load_materials_data()
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(materials_frame, style='Modern.TFrame')
        button_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.load_materials_data, style='Primary.TButton').pack(side=tk.LEFT, padx=5)
    
    def setup_dashboard_tab(self, notebook):
        """–í–∫–ª–∞–¥–∫–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
        dashboard_frame = ttk.Frame(notebook, style='Modern.TFrame')
        notebook.add(dashboard_frame, text="üìä –î–∞—à–±–æ—Ä–¥")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.Frame(dashboard_frame, style='Card.TFrame')
        stats_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        ttk.Label(stats_frame, text="–î–∞—à–±–æ—Ä–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", font=('Arial', 12)).pack(pady=20)
    
    def load_orders_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_orders = self.planner.orders_df
        
        company_filter = self.company_var.get()
        if company_filter != '–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏':
            filtered_orders = filtered_orders[filtered_orders['–ö–ª–∏–µ–Ω—Ç'] == company_filter]
        
        search_text = self.search_var.get().lower()
        if search_text:
            filtered_orders = filtered_orders[
                filtered_orders.apply(lambda row: search_text in str(row).lower(), axis=1)
            ]
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        for _, order in filtered_orders.iterrows():
            self.orders_tree.insert('', tk.END, values=(
                order['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'],
                order['–ö–ª–∏–µ–Ω—Ç'],
                order.get('–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏', ''),
                f"{order.get('–ü–ª–æ—â–∞–¥—å –∑–∞–∫–∞–∑–∞', 0):.2f}",
                f"{order.get('–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞', 0):,.2f}",
                order.get('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞', ''),
                "‚úÖ"  # –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
            ))
    
    def filter_orders(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        self.load_orders_data()
    
    def add_selected_orders(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        selected_items = self.orders_tree.selection()
        if not selected_items:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã!")
            return
        
        for item in selected_items:
            values = self.orders_tree.item(item)['values']
            order_num = values[0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            if order_num not in self.get_selected_orders():
                self.selected_orders_listbox.insert(tk.END, order_num)
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(selected_items)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    def get_selected_orders(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        return list(self.selected_orders_listbox.get(0, tk.END))
    
    def remove_selected_order(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selected_indices = self.selected_orders_listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        for index in reversed(selected_indices):
            self.selected_orders_listbox.delete(index)
    
    def clear_all_orders(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        self.selected_orders_listbox.delete(0, tk.END)
    
    def calculate_requirements(self):
        """–†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"""
        selected_orders = self.get_selected_orders()
        if not selected_orders:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        requirements = self.planner.calculate_material_requirements(selected_orders)
        
        if 'error' in requirements:
            messagebox.showerror("–û—à–∏–±–∫–∞", requirements['error'])
            return
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–õ–Ø {len(selected_orders)} –ó–ê–ö–ê–ó–û–í:\n")
        self.results_text.insert(tk.END, "=" * 50 + "\n\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å—é
        sorted_materials = sorted(requirements['material_balance'].items(), 
                                 key=lambda x: x[1]['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö'], reverse=True)
        
        for material, balance in sorted_materials[:10]:
            if balance['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö'] > 0:
                self.results_text.insert(tk.END, f"üì¶ {material}:\n")
                self.results_text.insert(tk.END, f"   –¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å: {balance['–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å']:.2f}\n")
                self.results_text.insert(tk.END, f"   –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å: {balance['–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å']:.2f}\n")
                self.results_text.insert(tk.END, f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: {balance['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö']:.2f}\n")
                
                remaining = balance['–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ']
                if remaining >= 0:
                    self.results_text.insert(tk.END, f"   ‚úÖ –û—Å—Ç–∞—Ç–æ–∫: {remaining:.2f}\n")
                else:
                    self.results_text.insert(tk.END, f"   ‚ùå –î–ï–§–ò–¶–ò–¢: {-remaining:.2f}\n")
                self.results_text.insert(tk.END, "\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É
        if requirements['purchase_requirements']:
            self.results_text.insert(tk.END, f"üö® –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–ö–£–ü–ö–ê ({len(requirements['purchase_requirements'])} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)\n")
    
    def reserve_materials(self):
        """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        selected_orders = self.get_selected_orders()
        if not selected_orders:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã!")
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {len(selected_orders)} –∑–∞–∫–∞–∑–æ–≤")
        self.load_materials_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
    
    def generate_purchase_order(self):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–∫—É–ø–∫—É"""
        selected_orders = self.get_selected_orders()
        if not selected_orders:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã!")
            return
        
        requirements = self.planner.calculate_material_requirements(selected_orders)
        
        if 'error' in requirements:
            messagebox.showerror("–û—à–∏–±–∫–∞", requirements['error'])
            return
        
        if not requirements.get('purchase_requirements'):
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞–ª–∏—á–∏–∏")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        purchase_text = f"–ó–ê–Ø–í–ö–ê –ù–ê –ó–ê–ö–£–ü–ö–£ –ú–ê–¢–ï–†–ò–ê–õ–û–í\n"
        purchase_text += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        purchase_text += f"–î–ª—è –∑–∞–∫–∞–∑–æ–≤: {', '.join(selected_orders)}\n\n"
        
        total_cost = 0
        for material, quantity in requirements['purchase_requirements'].items():
            price = self.planner.estimate_material_price(material)
            cost = price * quantity
            total_cost += cost
            purchase_text += f"‚Ä¢ {material}: {quantity:.2f} √ó {price:,.2f} —Ä—É–±. = {cost:,.2f} —Ä—É–±.\n"
        
        purchase_text += f"\n–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost:,.2f} —Ä—É–±."
        
        # –ü–æ–∫–∞–∑ –∑–∞—è–≤–∫–∏
        self.show_purchase_order(purchase_text)
    
    def show_purchase_order(self, order_text):
        """–ü–æ–∫–∞–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–∫—É–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        order_window = tk.Toplevel(self.root)
        order_window.title("–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É")
        order_window.geometry("600x500")
        order_window.configure(bg='white')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        order_window.transient(self.root)
        order_window.grab_set()
        
        # –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
        text_widget = scrolledtext.ScrolledText(order_window, font=('Arial', 10), wrap=tk.WORD)
        text_widget.insert(1.0, order_text)
        text_widget.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        text_widget.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(order_window)
        button_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", 
                  command=lambda: self.save_purchase_order(order_text), style='Primary.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="üñ®Ô∏è –ü–µ—á–∞—Ç—å", 
                  command=lambda: self.print_purchase_order(order_text), style='Success.TButton').pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", 
                  command=order_window.destroy, style='Danger.TButton').pack(side=tk.RIGHT, padx=5)
    
    def save_purchase_order(self, order_text):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ñ–∞–π–ª"""
        filename = f"–ó–∞—è–≤–∫–∞_–Ω–∞_–∑–∞–∫—É–ø–∫—É_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(order_text)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
    
    def print_purchase_order(self, order_text):
        """–ü–µ—á–∞—Ç—å –∑–∞—è–≤–∫–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—á–∞—Ç–∏
        messagebox.showinfo("–ü–µ—á–∞—Ç—å", "–§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def load_materials_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.materials_tree.get_children():
            self.materials_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        for material, stock in self.planner.stock_data.items():
            reserved = self.planner.reserved_materials.get(material, 0)
            available = max(0, stock - reserved)
            
            status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if available > 0 else "‚ö†Ô∏è –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
            if reserved > 0:
                status = f"üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ ({reserved})"
            
            self.materials_tree.insert('', tk.END, values=(
                material,
                f"{stock:.2f}",
                f"{reserved:.2f}",
                f"{available:.2f}",
                status
            ))

    def estimate_material_price(self, material):
        """–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        material_lower = material.lower()
        
        if any(x in material_lower for x in ['—Å—Ç–µ–∫–ª–æ', 'glass']):
            return 1500
        elif any(x in material_lower for x in ['–ø—Ä–æ—Ñ–∏–ª—å', 'profile']):
            return 800
        elif any(x in material_lower for x in ['–∞—Ä–≥–æ–Ω', 'argon']):
            return 200
        elif any(x in material_lower for x in ['–≥–µ—Ä–º–µ—Ç–∏–∫', 'sealant']):
            return 1500
        elif any(x in material_lower for x in ['–ª–µ–Ω—Ç–∞', 'tape']):
            return 300
        else:
            return 1000

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        root = tk.Tk()
        app = ModernProductionPlannerGUI(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    main()
